;;; SICP Exercise 1.15
;;; (The online text can be found at 
;;;     http://mitpress.mit.edu/sicp/full-text/book/book.html)
;;;
;;; For this exercise, we investigated the orders of growth for a
;;; recursive procedure to approximate the sine of an angle.
;;;
;;; For part a), we had to determine the number of times that the
;;; procedure p was applied when the (sine 12.15) expression was evaluated.
;;;
;;; For part b), we had to figure out the orders of growth in space and
;;; number of steps as a function of a used by the process generated by
;;; the sine procedure for the evaluation of (sine a).

; The procedure was defined in the book as follows:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

; Part a)
; To determine the number of times that the procedure p is applied for the
; expression (sine 12.15), we can use the good old substitution model:

;; (sine 12.15)
;; (p (sine (/ 12.15 3.0)))
;; (p (sine 4.05))
;; (p (p (sine (/ 4.05 3.0))))
;; (p (p (sine 1.3499999999999999)))
;; (p (p (p (sine (/ 1.3499999999999999 3.0)))))
;; (p (p (p (sine 0.44999999999999996))))
;; (p (p (p (p (sine (/ 0.44999999999999996 3.0))))))
;; (p (p (p (p (sine 0.15)))))
;; (p (p (p (p (p (sine (/ 0.15 3.0)))))))
;; (p (p (p (p (p (sine 0.049999999999999996))))))
;; (p (p (p (p (p 0.049999999999999996)))))

; So we can see that the procedure p is applied 5 times when
; (sine 12.15) is evaluated.


; Part b)
; Suppose we evaluate (sine a) for some given number a.

; We have a recursive process here (with delayed operations).
; The order of growth in both space and number of steps will directly
; correspond to how many delayed applications of the procedure p that
; we have, which as we saw in part a), can be determined by figuring out
; how many divisions by 3 it takes to make the number a less than 0.1:

; a/(3^k) < 0.1 ==> k > log_3 (a / 0.1) .

; So for a given a, we expect about log_3 (a / 0.1) delayed calls to p.
; (It will in fact be exactly the ceiling of this number.)

; Once again, simplifying the math a bit with the Theta notation, we have
; that log_3 (a / 0.1) = log_3(a) - log_3(0.1)  (good old log laws), so we
; can ignore the constant log_3(0.1) and take the order of growth for both
; space and number of steps to be Theta(log_3(a)).

; (A note in the very next section of the book explains that the base of the
; logarithm doesn't matter, so we can in fact say that the order of growth
; for space and number of steps is simply Theta(log(a)). )