;;; SICP Exercise 1.9
;;; (The online text can be found at 
;;;     http://mitpress.mit.edu/sicp/full-text/book/book.html)
;;;
;;; For this exercise we were given two procedures that define addition
;;; in terms of incrementing and decrementing their arguments, and we 
;;; had to illustrate the process generated by each procedure using the
;;; substitution model, and determine whether the processes are iterative
;;; or recursive.

; The procedures are defined as follows (I've included the inc and dec 
; procedure definitions, and modified the procedure names so that they
; run at the interpreter without it complaining about the '+' redefinition.

(define (inc x) (+ x 1))

(define (dec x) (- x 1))


(define (first+ a b)
  (if (= a 0)
      b
      (inc (first+ (dec a) b))))

(define (second+ a b)
  (if (= a 0)
      b
      (second+ (dec a) (inc b))))


; Suppose we use the first procedure and evaluate (first+ 4 5).
; The process looks like this (the evaluation for inc and dec has been
; omitted so that the expansion shape is more obvious).

;; (first+ 4 5)
;; (inc (first+ 3 5))
;; (inc (inc (first+ 2 5)))
;; (inc (inc (inc (first+ 1 5))))
;; (inc (inc (inc (inc (first+ 0 5)))))
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)
;; 9

; So as we can see from the shape, this is a recursive process. The
; shape expands to the right as the procedure builds us its chain of 
; deferred operations.


; We can look at the shape we get for evaluating (second+ 4 5) too:

;; (second+ 4 5)
;; (second+ 3 6)
;; (second+ 2 7)
;; (second+ 1 8)
;; (second+ 0 9)
;; 9

; This one is an iterative process. There is no expansion in the shape,
; as there are no deferred operations.